# Google OAuth Configuration
VITE_GOOGLE_CLIENT_ID=your_google_client_id_here.apps.googleusercontent.com

# Add your Google OAuth Client ID from Google Cloud Console
# https://console.cloud.google.com/apis/credentials

# Bunny Stream Configuration
VITE_BUNNY_STREAM_API_KEY=your-bunny-api-key-here
VITE_BUNNY_LIBRARY_ID=your-library-id-here
VITE_BUNNY_CDN_HOSTNAME=your-cdn-hostname.b-cdn.net

# Get these from: https://bunny.net/dashboard/stream
# 1. Create a Stream Library
# 2. Go to API tab to get API Key and Library ID
# 3. CDN Hostname is shown in the library settings

# Backend API Configuration (for URL resolution with yt-dlp)
VITE_BACKEND_API_URL=http://localhost:5000

# Backend is needed for Sibnet, Google Drive, and other complex video platforms
# Start backend: cd bunny_scripts && python upload_api.py

# Video Proxy (Cloudflare Worker - Python olmadan)
VITE_VIDEO_PROXY_URL=https://anime-video-proxy.YOUR-SUBDOMAIN.workers.dev

# Cloudflare Worker kullanarak Python backend'e ihtiyaç duymadan video proxy
# Deploy: cd cloudflare-worker && wrangler deploy

# Download & Upload API (Node.js - Python olmadan)
VITE_DOWNLOAD_API_URL=http://localhost:5001

# Node.js backend ile video indirme ve yükleme (Sibnet için önerilir)
# Start: cd server && node download-upload-api.js

# ========================================
# Backblaze B2 + Cloudflare Configuration
# ========================================

# Backblaze B2 Storage
VITE_B2_KEY_ID=your-b2-key-id-here
VITE_B2_APPLICATION_KEY=your-b2-application-key-here
VITE_B2_BUCKET_NAME=anime-videos
VITE_B2_BUCKET_ID=your-bucket-id-here
VITE_B2_ENDPOINT=s3.us-west-004.backblazeb2.com

# Get these from: https://www.backblaze.com/b2/cloud-storage.html
# 1. Create a B2 account
# 2. Create a bucket (Public)
# 3. Create an Application Key (Read & Write)
# 4. Note down: keyID, applicationKey, bucketName, bucketID, endpoint

# Cloudflare CDN URL
VITE_CDN_URL=https://videos.yourdomain.com

# Setup Cloudflare CDN:
# 1. Add CNAME record: videos -> f004.backblazeb2.com (Proxied)
# 2. Configure caching rules
# 3. Add CORS headers via Transform Rules

# B2 Upload API (Node.js backend for encoding)
VITE_B2_API_URL=http://localhost:5002
B2_API_PORT=5002

# Backend is needed for:
# - Video encoding (FFmpeg)
# - HLS segment creation
# - Thumbnail generation
# Start: cd server && node b2-upload-api.js

# FFmpeg paths (for backend)
FFMPEG_PATH=ffmpeg
FFPROBE_PATH=ffprobe

# ========================================
# Video Storage Selection
# ========================================
# Choose which storage to use: 'bunny' or 'b2'
VITE_VIDEO_STORAGE=bunny

# When VITE_VIDEO_STORAGE=bunny: Use Bunny.net Stream
# When VITE_VIDEO_STORAGE=b2: Use Backblaze B2 + Cloudflare

# ========================================
# Aniwatch API Configuration
# ========================================
# URL of your aniwatch-api instance
# Default: http://localhost:4000/api/v2/hianime (local development)
# Production: Your deployed aniwatch-api URL
VITE_ANIWATCH_API_URL=http://localhost:4000/api/v2/hianime

# Setup:
# 1. Already in aniwatch-api folder
# 2. Install: npm install
# 3. Start: npm start
# 4. API will be available at http://localhost:4000

# ========================================
# Video Proxy Configuration (HiAnime Proxy)
# ========================================
# URL of video proxy server (for CORS bypass and HLS streaming)
# Default: http://localhost:5000 (local development)
# Production: Your deployed proxy URL
VITE_PROXY_URL=http://localhost:5000

# Setup:
# 1. Already in server/hianime_proxy.js
# 2. Start: node server/hianime_proxy.js
# 3. Proxy will be available at http://localhost:5000
